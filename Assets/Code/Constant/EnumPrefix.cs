// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------



public class ThemePrefix {
    
    private static System.Collections.Generic.Dictionary<Theme, string> prefix = new System.Collections.Generic.Dictionary<Theme, string>(3);
    
    static ThemePrefix() {
        prefix.Add(Theme.Wood, "w");
        prefix.Add(Theme.Grass, "g");
    }
    
    public static string Get(Theme theme) {
        string result;
        if (prefix.TryGetValue(theme, out  result)) {
            return result;
        }
        return null;
    }
}


public class GroundPrefix {
    
    private static System.Collections.Generic.Dictionary<GroundType, string> prefix = new System.Collections.Generic.Dictionary<GroundType, string>(4);
    
    static GroundPrefix() {
        prefix.Add(GroundType.Normal, "n");
        prefix.Add(GroundType.Rough, "r");
        prefix.Add(GroundType.NormalToRough, "nr");
    }
    
    public static string Get(GroundType groundtype) {
        string result;
        if (prefix.TryGetValue(groundtype, out  result)) {
            return result;
        }
        return null;
    }
}


public class PanelPrefix {
    
    private static System.Collections.Generic.Dictionary<PanelType, string> prefix = new System.Collections.Generic.Dictionary<PanelType, string>(11);
    
    static PanelPrefix() {
        prefix.Add(PanelType.Acceleration, "a");
        prefix.Add(PanelType.DirectionChange, "d");
        prefix.Add(PanelType.RotationCW, "rcw");
        prefix.Add(PanelType.RotationCCW, "rccw");
        prefix.Add(PanelType.ExcitingArea, "e");
        prefix.Add(PanelType.HealingArea, "h");
        prefix.Add(PanelType.Pit, "p");
        prefix.Add(PanelType.Booster, "b");
        prefix.Add(PanelType.Stopper, "s");
        prefix.Add(PanelType.Crack, "c");
    }
    
    public static string Get(PanelType paneltype) {
        string result;
        if (prefix.TryGetValue(paneltype, out  result)) {
            return result;
        }
        return null;
    }
}


public class WallPrefix {
    
    private static System.Collections.Generic.Dictionary<WallType, string> prefix = new System.Collections.Generic.Dictionary<WallType, string>(4);
    
    static WallPrefix() {
        prefix.Add(WallType.Hard, "h");
        prefix.Add(WallType.Breakable, "b");
        prefix.Add(WallType.Edge, "e");
    }
    
    public static string Get(WallType walltype) {
        string result;
        if (prefix.TryGetValue(walltype, out  result)) {
            return result;
        }
        return null;
    }
}


public class ItemPrefix {
    
    private static System.Collections.Generic.Dictionary<ItemType, string> prefix = new System.Collections.Generic.Dictionary<ItemType, string>(4);
    
    static ItemPrefix() {
        prefix.Add(ItemType.Small, "s");
        prefix.Add(ItemType.Medium, "m");
        prefix.Add(ItemType.Large, "l");
    }
    
    public static string Get(ItemType itemtype) {
        string result;
        if (prefix.TryGetValue(itemtype, out  result)) {
            return result;
        }
        return null;
    }
}


public class BarrierPrefix {
    
    private static System.Collections.Generic.Dictionary<BarrierType, string> prefix = new System.Collections.Generic.Dictionary<BarrierType, string>(3);
    
    static BarrierPrefix() {
        prefix.Add(BarrierType.Stick, "s");
        prefix.Add(BarrierType.Circle, "c");
    }
    
    public static string Get(BarrierType barriertype) {
        string result;
        if (prefix.TryGetValue(barriertype, out  result)) {
            return result;
        }
        return null;
    }
}


public class BarrierScalePrefix {
    
    private static System.Collections.Generic.Dictionary<BarrierScale, string> prefix = new System.Collections.Generic.Dictionary<BarrierScale, string>(4);
    
    static BarrierScalePrefix() {
        prefix.Add(BarrierScale.Small, "s");
        prefix.Add(BarrierScale.Medium, "m");
        prefix.Add(BarrierScale.Large, "l");
    }
    
    public static string Get(BarrierScale barrierscale) {
        string result;
        if (prefix.TryGetValue(barrierscale, out  result)) {
            return result;
        }
        return null;
    }
}
